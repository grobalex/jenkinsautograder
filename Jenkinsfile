// #########################################################################
//                          DO NOT EDIT THIS FILE                        
// #########################################################################

def get_files(String directory = "") {
  dir(directory) {
  try {
      sh "find ./*.py -exec  basename {} .py \\; > listFiles"
      return readFile( "listFiles" ).split( "\\r?\\n" )
  } catch (Exception e) {
      return []
  }
}
}

def get_all_files(String directory = "") {
  dir(directory) {
  try {
      sh "ls > listFiles"
      return readFile( "listFiles" ).split( "\\r?\\n" )
  } catch (Exception e) {
      return []
  }
}
}

void grading_output() {
  sh "touch ${WORKSPACE}/grading_output.txt"
  sh 'echo "#####################################" >> ${WORKSPACE}/grading_output.txt'
  sh 'echo "Built on: ${BUILD_TIMESTAMP}" >> ${WORKSPACE}/grading_output.txt'
  sh 'echo "#####################################" >> ${WORKSPACE}/grading_output.txt'
}

void push_to_git() {
    withCredentials([usernamePassword(credentialsId: 'github-alex', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
        try {
            sh "git checkout -b autograder"
        } catch (Exception e) {
            sh "echo Branch Already exists"
        }  
        sh "git add grading_output.txt"
        sh 'git commit -m "[JAG] Run at ${BUILD_TIMESTAMP}"'
        sh 'git push -f https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${org}/${student_repo_name}.git HEAD:autograder'
    }
}

pipeline {
  agent any
  environment {
    def student_repo_name = "${env.GIT_URL.replaceFirst(/^.*\/([^\/]+?).git$/, '$1')}"
    def assignment = student_repo_name.split("-").first()
    def solutions_repo = sh(script: "grep -A1 '${org}/${assignment}.*solution/master' ${env.workspace_pwd}/workspaces.txt", returnStdout: true).split("\n").last()
    def student_repo = "${env.WORKSPACE}"
    def org = "khoury-sp20-cs5001-align"
  }

 stages {
     stage('Create necassary files') {
            steps {
              script {
              sh 'mkdir -p hidden'
              sh 'mkdir -p console'
              try {
                sh "cp -R ${env.workspace_pwd}/${solutions_repo}/hidden ."
              } catch (Exception e) {
                  sh 'echo no hidden dir'
              }
              try {
                sh "cp -R ${env.workspace_pwd}/${solutions_repo}/console ."
              } catch (Exception e) {
                  sh 'echo no console dir'
              }
             }
           }
        } 
      stage('Get Submitted Files ') {
        steps {
              script {
                assignment_files = get_files("${WORKSPACE}")
                hidden_files = get_files("hidden")
                assignment_files.each { file ->
                      dir("") {
                        sh 'echo " " >> ${WORKSPACE}/grading_output.txt'
                        sh 'echo "-------------------------------------" >> ${WORKSPACE}/grading_output.txt'
                        sh "echo Running style checker on: ${file} >> ${WORKSPACE}/grading_output.txt"
                        sh "echo *Note if empty: no style errors found* >> ${WORKSPACE}/grading_output.txt"
                        sh 'echo " " >> ${WORKSPACE}/grading_output.txt'
                        catchError {
                          sh "python3 -m pycodestyle --first ${file}.py >> ${WORKSPACE}/grading_output.txt"
                        }
                        sh 'echo " " >> ${WORKSPACE}/grading_output.txt'
                      }
                      sh 'echo "-------------------------------------" >> ${WORKSPACE}/grading_output.txt'
                      sh 'echo Running Console Tests: >> ${WORKSPACE}/grading_output.txt'
                      sh "echo *Note if empty: no console tests exist* >> ${WORKSPACE}/grading_output.txt"
                      sh 'echo " " >> ${WORKSPACE}/grading_output.txt'
                      dir("console") {
                       sh(script: 'ls *${file}_in* > filecount', returnStatus: true) 
                       console_file_count = readFile( "filecount" ).split( "\\r?\\n" )
                        for(int i = 1;i<= console_file_count.size();i++) {
                          sh 'echo "-----------------" >> ${WORKSPACE}/grading_output.txt'
                          sh "echo Console test ${file} ${i}: >> ${WORKSPACE}/grading_output.txt"
                          sh 'echo " " >> ${WORKSPACE}/grading_output.txt'
                          catchError {
                          sh(script: "python3 ${WORKSPACE}/${file}.py < ${file}_in${i}.txt > out.txt", returnStatus: false)
                          sh(script: "diff -bwi out.txt ${file}_out${i}.txt >> ${WORKSPACE}/grading_output.txt", returnStatus: false)
                          }
                          sh 'echo " " >> ${WORKSPACE}/grading_output.txt'
                        }
                      }
                  sh 'echo "-------------------------------------" >> ${WORKSPACE}/grading_output.txt'
                  sh "echo Running Unit Tests ${file}: >> ${WORKSPACE}/grading_output.txt"
                  sh "echo *Note if empty: no unit tests exist* >> ${WORKSPACE}/grading_output.txt"
                  sh 'echo " " >> ${WORKSPACE}/grading_output.txt'
                   dir("hidden") {
                     sh "python3 ${file}_tests.py >> ${WORKSPACE}/grading_output.txt"
                   }
                  } //  end loop
                sh "echo END >> ${WORKSPACE}/grading_output.txt"
                push_to_git()
                }
            }
        } 
  } //STAGES
} // PIPELINE END
